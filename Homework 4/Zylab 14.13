# Kimberly Jin
# 2053517

# Global variable
num_calls = 0

# TODO: Write the partitioning algorithm - pick the middle element as the 
#       pivot, compare the values using two index variables l and h (low and high), 
#       initialized to the left and right sides of the current elements being sorted,
#       and determine if a swap is necessary
def partition(user_ids, i, k):
    midpoint = i + (k - i) // 2
    pivot = user_ids[midpoint]

    #  Initialize variables
    done = False
    low = i
    high = k
    
    while not done:
        #  Increment low while numbers[low] < pivot 
        
        while user_ids[low] < pivot:
            low = low + 1
            
        #  Decrement h while pivot < user_ids[h] 
        while pivot < user_ids[high]:
            high = high - 1
            
        # If there are 0 or 1 items remaining,
        # all numbers are partitioned
        # return high
        
        if low >= high:
            done = True
            
        else:
            # Swap numbers[l] and numbers[h],
            # update l and h
            temp = user_ids[low]
            user_ids[low] = user_ids[high]
            user_ids[high] = temp
            low = low + 1
            high = high - 1
    
    return high
# TODO: Write the quicksort algorithm that recursively sorts the low and 
#       high partitions. Add 1 to num_calls each time quicksort() is called

def quicksort(user_ids, i, k):
    global num_calls
    
    num_calls+=1
    j = 0
    # best case is if there're 0 or 1 entries to sort
    # means parition is already sorted
    
    if i >= k:
        return
    # parition data inside array
    # j returned from parition, located as last item in low parition
    
    j = partition(user_ids, i, k)
    
    # sorts low parition i to j recursively
    # and high parition too from j+1 to k
    
    quicksort(user_ids, i, j)
    quicksort(user_ids, j + 1, k)

    
    return


if __name__ == "__main__":
    user_ids = []
    user_id = input()
    while user_id != "-1":
        user_ids.append(user_id)
        user_id = input()
        
    # Initial call to quicksort 
    quicksort(user_ids, 0, len(user_ids) - 1)
    
    # Print number of calls to quicksort
    print(num_calls)
    
    # Print sorted user ids
    for user_id in user_ids:
        print(user_id)
