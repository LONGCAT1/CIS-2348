Complete the FoodItem class by adding a constructor to initialize a food item. 
The constructor should initialize the name to "None" and all other instance attributes to 0.0 by default. 
If the constructor is called with a food name, grams of fat, grams of carbohydrates, and grams of protein, the constructor should assign each instance attribute with the appropriate parameter value.

The given program accepts as input a food item name, fat, carbs, and protein and the number of servings. 
The program creates a food item using the constructor parameters' default values and a food item using the input values. 
The program outputs the nutritional information and calories per serving for both food items.


class FoodItem:
  def __init__(self, name = "None", fat = 0.0, carbs = 0.0, protein = 0.0):
    self.name = name
    self.fat = fat
    self.carbs = carbs
    self.protein = protein

  def get_calories(self, num_servings):
    # Calorie formula
    calories = ((self.fat * 9) + (self.carbs * 4) + (self.protein * 4)) * num_servings;
    return calories

def print_info(self):
    print('Nutritional information per serving of {}:'.format(self.name))
    print('   Fat: {:.2f} g'.format(self.fat))
    print('   Carbohydrates: {:.2f} g'.format(self.carbs))
    print('   Protein: {:.2f} g'.format(self.protein))


if __name__ == "__main__":

  default = FoodItem()
  default.print_info()
  num_Servings = 0.0
  num_Cals = get_calories(num_Servings)
  print('Number of calories for {:.2f} serving(s): {:.2f}'.format(num_Servings, num_Cals))
  print()
  
  
  nutri_Info = FoodItem(input(), float(input()), float(input()), float(input()))
  num_Servings = float(input())
  num_Cals = get_calories(num_Servings)
  
  print('Number of calories for {:.2f} serving(s): {:.2f}'.format(num_Servings, num_Cals))

